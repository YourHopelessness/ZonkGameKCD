// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ZonkGame.DB.Context;

#nullable disable

namespace ZonkGame.DB.Migrations
{
    [DbContext(typeof(ZonkDbContext))]
    partial class ZonkDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ZonkGame.DB.Entites.Zonk.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ended_at");

                    b.Property<string>("GameState")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("game_state");

                    b.Property<string>("GameType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("game_type");

                    b.Property<int>("TargetScore")
                        .HasColumnType("integer")
                        .HasColumnName("target_score");

                    b.Property<Guid?>("winner_id")
                        .HasColumnType("uuid")
                        .HasColumnName("winner_id");

                    b.HasKey("Id")
                        .HasName("pk_game");

                    b.HasIndex("winner_id")
                        .HasDatabaseName("ix_game_winner_id");

                    b.ToTable("game", (string)null);
                });

            modelBuilder.Entity("ZonkGame.DB.Entites.Zonk.GameAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AvaliableCombination")
                        .HasColumnType("text")
                        .HasColumnName("avaliable_combination");

                    b.Property<Guid>("CurrentPlayerId")
                        .HasColumnType("uuid")
                        .HasColumnName("current_player_id");

                    b.Property<int[]>("CurrentRoll")
                        .HasColumnType("integer[]")
                        .HasColumnName("current_roll");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("event_type");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_id");

                    b.Property<int>("OpponentTotalScore")
                        .HasColumnType("integer")
                        .HasColumnName("opponent_total_score");

                    b.Property<int>("PlayerTotalScore")
                        .HasColumnType("integer")
                        .HasColumnName("player_total_score");

                    b.Property<int>("PlayerTurnScore")
                        .HasColumnType("integer")
                        .HasColumnName("player_turn_score");

                    b.Property<DateTime>("RecordTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_time")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<int?>("RemainingDice")
                        .HasColumnType("integer")
                        .HasColumnName("remaining_dice");

                    b.PrimitiveCollection<int[]>("SelectedCombination")
                        .HasColumnType("integer[]")
                        .HasColumnName("selected_combination");

                    b.HasKey("Id")
                        .HasName("pk_game_audit");

                    b.HasIndex("CurrentPlayerId")
                        .HasDatabaseName("ix_game_audit_current_player_id");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_game_audit_game_id");

                    b.ToTable("game_audit", (string)null);
                });

            modelBuilder.Entity("ZonkGame.DB.Entites.Zonk.GamePlayer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("PlayerTurn")
                        .HasColumnType("integer")
                        .HasColumnName("player_turn");

                    b.Property<Guid>("game_id")
                        .HasColumnType("uuid")
                        .HasColumnName("game_id");

                    b.Property<Guid>("player_id")
                        .HasColumnType("uuid")
                        .HasColumnName("player_id");

                    b.HasKey("Id")
                        .HasName("pk_game_player");

                    b.HasIndex("game_id")
                        .HasDatabaseName("ix_game_player_game_id");

                    b.HasIndex("player_id")
                        .HasDatabaseName("ix_game_player_player_id");

                    b.ToTable("game_player", (string)null);
                });

            modelBuilder.Entity("ZonkGame.DB.Entites.Zonk.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("player_name");

                    b.Property<string>("PlayerType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("player_type");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_player");

                    b.ToTable("player", (string)null);
                });

            modelBuilder.Entity("ZonkGame.DB.Entites.Zonk.Game", b =>
                {
                    b.HasOne("ZonkGame.DB.Entites.Zonk.Player", "Winner")
                        .WithMany()
                        .HasForeignKey("winner_id")
                        .HasConstraintName("fk_game_player_winner_id");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("ZonkGame.DB.Entites.Zonk.GameAudit", b =>
                {
                    b.HasOne("ZonkGame.DB.Entites.Zonk.Player", "CurrentPlayer")
                        .WithMany("GameAudit")
                        .HasForeignKey("CurrentPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_game_audit_player_current_player_id");

                    b.HasOne("ZonkGame.DB.Entites.Zonk.Game", "Game")
                        .WithMany("GameAudit")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_game_audit_game_game_id");

                    b.Navigation("CurrentPlayer");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("ZonkGame.DB.Entites.Zonk.GamePlayer", b =>
                {
                    b.HasOne("ZonkGame.DB.Entites.Zonk.Game", "Game")
                        .WithMany("GamePlayers")
                        .HasForeignKey("game_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_game_player_game_game_id");

                    b.HasOne("ZonkGame.DB.Entites.Zonk.Player", "Player")
                        .WithMany("GamePlayers")
                        .HasForeignKey("player_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_game_player_player_player_id");

                    b.Navigation("Game");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("ZonkGame.DB.Entites.Zonk.Game", b =>
                {
                    b.Navigation("GameAudit");

                    b.Navigation("GamePlayers");
                });

            modelBuilder.Entity("ZonkGame.DB.Entites.Zonk.Player", b =>
                {
                    b.Navigation("GameAudit");

                    b.Navigation("GamePlayers");
                });
#pragma warning restore 612, 618
        }
    }
}
