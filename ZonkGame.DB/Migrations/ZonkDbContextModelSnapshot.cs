// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ZonkGame.DB.Context;

#nullable disable

namespace ZonkGame.DB.Migrations
{
    [DbContext(typeof(ZonkDbContext))]
    partial class ZonkDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ZonkGame.DB.Entites.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("GameState")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GameType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TargetScore")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("ZonkGame.DB.Entites.GameAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AvaliableCombination")
                        .HasColumnType("text");

                    b.Property<Guid>("CurrentPlayerId")
                        .HasColumnType("uuid");

                    b.Property<int[]>("CurrentRoll")
                        .HasColumnType("integer[]");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<int>("OpponentTotalScore")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerTotalScore")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerTurnScore")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RecordTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("RemainingDice")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<int[]>("SelectedCombination")
                        .HasColumnType("integer[]");

                    b.HasKey("Id");

                    b.HasIndex("CurrentPlayerId");

                    b.HasIndex("GameId");

                    b.ToTable("GameAudits");
                });

            modelBuilder.Entity("ZonkGame.DB.Entites.GamePlayer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid");

                    b.Property<int>("PlayerTurn")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.ToTable("GamePlayers");
                });

            modelBuilder.Entity("ZonkGame.DB.Entites.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlayerType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("ZonkGame.DB.Entites.Game", b =>
                {
                    b.HasOne("ZonkGame.DB.Entites.Player", "Winner")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("ZonkGame.DB.Entites.GameAudit", b =>
                {
                    b.HasOne("ZonkGame.DB.Entites.Player", "CurrentPlayer")
                        .WithMany()
                        .HasForeignKey("CurrentPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZonkGame.DB.Entites.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentPlayer");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("ZonkGame.DB.Entites.GamePlayer", b =>
                {
                    b.HasOne("ZonkGame.DB.Entites.Game", "Game")
                        .WithMany("GamePlayers")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZonkGame.DB.Entites.Player", "Player")
                        .WithMany("GamePlayers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("ZonkGame.DB.Entites.Game", b =>
                {
                    b.Navigation("GamePlayers");
                });

            modelBuilder.Entity("ZonkGame.DB.Entites.Player", b =>
                {
                    b.Navigation("GamePlayers");
                });
#pragma warning restore 612, 618
        }
    }
}
